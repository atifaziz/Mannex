<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
    Func<string, Func<int, string>> concat = a => b => a + b;
    Func<int, string> tf = concat("T");
    Func<int, string> argf = concat("arg");

    Func<string, Func<IEnumerable<string>, string>> 
        join0 = sep => ss => string.Join(sep, ss.ToArray());
    Func<IEnumerable<string>, string> 
        @join = join0(", ");

    Func<int, int, IEnumerable<int>> range = Enumerable.Range;

    const int max = 3; // TODO Increase for .NET Framework 4

    var q = from x in range(2, max)
            from y in range(1, x - 1)
            
            let ns = new
            {
                args  = range(1, x).ToArray(),
                bound = range(1, y).ToArray(),
                free  = range(y + 1, x - y).ToArray(),
            }

            let ts    = @join(ns.args.Select(tf))
            let ots   = @join(ns.free.Select(tf))
            let bound = @join(ns.bound.Select(n => tf(n) + " " + argf(n)))
            let free  = @join(ns.free.Select(argf))
            let all   = @join(ns.args.Select(argf))
            
            select (Action<string, string, string>) ((ft, fs, rt) => { #>

        /// <summary>
        /// Partially applies the first <#= bound.Count() > 1 
                                            ? bound.Count() + " arguments" 
                                            : "argument" #> of
        /// <see cref="<#= ft #>{<#= join0(",")(ns.args.Select(tf)) #><#= rt.Replace(" ", string.Empty) #>}"/>.
        /// </summary>

        [DebuggerStepThrough]
        public static <#= ft #><<#= ots #><#= rt #>> Apply<<#= ts #><#= rt #>>(
            this <#= ft #><<#= ts #><#= rt #>> <#= fs #>,
            <#= bound #>)
        {
            if (<#= fs #> == null) throw new ArgumentNullException("<#= fs #>");
            return (<#= free #>) => <#= fs #>(<#= all #>);
        }
<# }); #>
#region License, Terms and Author(s)
//
// Mannex - Extension methods for .NET
// Copyright (c) 2009 Atif Aziz. All rights reserved.
//
//  Author(s):
//
//      Atif Aziz, http://www.raboof.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#endregion

namespace Mannex
{
    using System;
    using System.Diagnostics;

    // ReSharper disable RedundantLambdaSignatureParentheses

    /// <summary>
    /// Extension methods for <see cref="Func{T}"/> and family.
    /// </summary>

    static partial class FuncExtensions
    {<#
        foreach (var f in q) f("Func", "func", ", TResult"); #>
    }

    /// <summary>
    /// Extension methods for <see cref="Action{T}"/> and family.
    /// </summary>

    static partial class ActionExtensions
    {<# 
        foreach (var f in q) f("Action", "action", string.Empty); #>
    }
}
